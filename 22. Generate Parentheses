class Solution {
    bool Balanced(string str)
    {
        stack<char> s;
        for(auto x:str)
        {
          if(s.empty()==false && ((s.top() =='(' && x ==')'))) 
          {s.pop();}
          else {s.push(x);}
        }
        if(s.empty()) {return true;}
        else  {return false;}
    }
public:
    vector<string> generateParenthesis(int n) {
        vector<string> v;
        string str;
      for(auto i=0;i<n;i++)
      {
          str=str+"()";
      }
        sort(str.begin(),str.end());
        do
        {
         if(Balanced(str)==true)
         {
         cout<<str<<endl;
         v.push_back(str);   
         }
        }
        while(next_permutation(str.begin(),str.end()));
        return v;
    }
};
