/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<pair<int,int>> values;
     int maxima=INT_MIN;
    void check(TreeNode *root,int count)
    {
    if(root==NULL){return ;}
    count++;
    if(root->left==NULL && root->right==NULL)
    {
     values.push_back(make_pair(count,root->val));
     maxima=max(maxima,count);
     count=0;
    }
    check(root->left,count);
    check(root->right,count);
    }
    int deepestLeavesSum(TreeNode* root) {
        int count=0;
        check(root,count);
        int sum=0;
        for(auto i=0;i<values.size();i++)
        {
        if(maxima==values[i].first)
        {
            sum+=values[i].second;
        }
        }
        return sum;
    }
};
